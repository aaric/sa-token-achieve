plugins {
    id "java"
    id "io.freefair.lombok" version "6.5.1" apply false
    id "io.spring.dependency-management" version "1.1.0" apply false
    id "org.springframework.boot" version "2.3.12.RELEASE" apply false
    id "team.yi.semantic-gitlog" version "0.5.17" apply false
}

allprojects {
    group = "com.sample"
    version = "0.6.0-SNAPSHOT"

    ext {
        // https://github.com/alibaba/spring-cloud-alibaba/wiki/版本说明#毕业版本依赖关系推荐使用
        springCloudVersion = "Hoxton.SR12"
        springCloudAlibabaVersion = "2.2.9.RELEASE"
        knife4jVersion = "3.0.3"
    }

    repositories {
        maven { url "https://maven.aliyun.com/repository/public" }
        maven { url "https://repository.incarcloud.com/content/groups/public" }
    }

}

subprojects {
    apply plugin: "java"
    apply plugin: "checkstyle"
    apply plugin: "io.freefair.lombok"
    apply plugin: "io.spring.dependency-management"
    apply plugin: "org.springframework.boot"

    java {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    configurations {
        developmentOnly
        runtimeClasspath {
            extendsFrom developmentOnly
        }
        all {
            //exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
            exclude group: "org.springframework.boot", module: "spring-boot-starter-tomcat"
            exclude group: "org.junit.vintage", module: "junit-vintage-engine"
        }
    }

    dependencies {
        implementation "org.slf4j:slf4j-api"

        implementation fileTree(dir: "lib", includes: ["*.jar"])

        //testImplementation "org.junit.jupiter:junit-jupiter"
        //testImplementation "org.junit.jupiter:junit-jupiter-params"
        testImplementation "org.springframework.boot:spring-boot-starter-test"

        developmentOnly "org.springframework.boot:spring-boot-devtools"
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
            mavenBom "com.alibaba.cloud:spring-cloud-alibaba-dependencies:$springCloudAlibabaVersion"
            mavenBom "com.github.xiaoymin:knife4j-dependencies:3.0.3"
            mavenBom "cn.dev33:sa-token-dependencies:1.32.0"
        }

        dependencies {
            dependencySet(group: "org.slf4j", version: "1.7.36") {
                entry "slf4j-api"
                entry "slf4j-nop"
                entry "slf4j-simple"
            }

            dependencySet(group: "org.junit.jupiter", version: "5.6.3") {
                entry "junit-jupiter"
                entry "junit-jupiter-params"
            }

//            dependency "com.fasterxml.jackson:jackson-databind:2.13.4.2"
        }
    }

    compileJava {
        options.encoding = "UTF-8"
        options.compilerArgs << "-Xlint:unchecked"
    }

    compileTestJava {
        options.encoding = "UTF-8"
        options.compilerArgs << "-Xlint:unchecked"
    }

    test {
        useJUnitPlatform()
    }

    task checkstyle(type: Checkstyle) {
        source = "src"
        include "**/*.java"
        ignoreFailures false
    }
    //checkstyleMain.exclude("**/proto/**/*.java")

    task removeLombokConfig() {
        def subProjectPath = project.projectDir
        if (null != subProjectPath) {
            def lombokConfigFile = new File(subProjectPath, "lombok.config")
            if (lombokConfigFile.exists()) {
                lombokConfigFile.delete()
            }
        }
    }

    task removeOutputLog() {
        def subProjectPath = project.projectDir
        if (null != subProjectPath) {
            subProjectPath.list().each { filename ->
                if (filename.endsWith(".log") || filename.equalsIgnoreCase("logs")) {
                    def subPath = new File(subProjectPath, filename)
                    if (subPath.isDirectory()) {
                        for (File leafFile : subPath.listFiles()) {
                            leafFile.delete()
                        }
                    }
                    subPath.delete()
                }
            }
        }
    }

    defaultTasks "assemble"
}

/*changelog {
    toRef = "master"
    isUnstable = true

    jsonFile = file("${project.rootDir}/CHANGELOG.json")
    fileSets = [
            {
                template = file("${project.rootDir}/config/gitlog/CHANGELOG.mustache")
                target = file("${project.rootDir}/CHANGELOG.md")
            }
    ]
}

derive {
    toRef = "master"
    isUnstable = true
    derivedVersionMark = "NEXT_VERSION:=="
}*/